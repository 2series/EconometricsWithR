[
["estimation-of-dynamic-causal-effects.html", "15 Estimation of Dynamic Causal Effects", " 15 Estimation of Dynamic Causal Effects For answering some questions in economic research it interesting to know how large the effect on \\(Y\\) now and in the future of a change in \\(X\\) is. This called the dynamic causal effect on \\(Y\\) of a change in \\(X\\). In this section we will see how to estimate dynamic causal effects using several R applications where we investigate the dynamic effect of cold weather in Florida on the price of orange juice concentrate. The discussion includes: Estimation of distributed lag models Heteroskedasticity- and autocorrelation-consistent (HAC) standard errors Generalized least squares (GLS) of ADL models library(AER) library(quantmod) library(PerformanceAnalytics) library(dynlm) library(orcutt) library(nlme) "],
["the-orange-juice-data.html", "15.1 The Orange Juice Data", " 15.1 The Orange Juice Data The largest cultivation region for oranges in the U.S. is located in state of Florida which usually has ideal climate for the fruit growth and thus makes Florida the source of almost all frozen juice contentrate produced in the country However, from time to time and depening on their severeness, cold snaps cause loss of harvests such that the supply of oranges decreases and consequently the price of frozen juice conzentrate rises. The timing of the price increases is complicated: a cut in today’s supply of concentrate influences not today’s price but also future prices because supply in future periods will be lower, too. Clearly, the magnitude of today’s and future price increases due to a freeze is an empirical question that can be investigated using a distributed lag model — a model that relates price changes to weather conditions. To begin with the analysis, we reproduce Figure 15.1 of the book which displays plots of the price index for frozen concentrated orange juice, percent changes in the price as well as monthly freezing degree days in Orlando, the center of Florida’s orange-growing region. # Load the frozen orange juice data set data(&quot;FrozenJuice&quot;) # price index for frozen concentrated juice FOJCPI &lt;- 100 * FrozenJuice[,1]/FrozenJuice[,2] FOJC_pctc &lt;- 100 * diff(log(FOJCPI)) FDD &lt;- FrozenJuice[,3] FOJCPI_xts &lt;- as.xts(FOJCPI) FDD_xts &lt;- as.xts(FrozenJuice[,3]) # Plot orange juice price index chart.TimeSeries(FOJCPI, main = &quot;Frozen Concentrated Orange Juice&quot;, ylab = &quot;Price index&quot;, col = &quot;steelblue&quot;, lwd = 2, date.format = &quot;%Y&quot;, minor.ticks = F) # Plot percent changes in prices chart.TimeSeries(FOJC_pctc, main = &quot;Monthly Changes in the Price of Frozen Conentrated Orange Juice&quot;, ylab = &quot;Percent&quot;, col = &quot;steelblue&quot;, lwd = 2, date.format = &quot;%Y&quot;, minor.ticks = F) # plot freezing degree days chart.TimeSeries(FrozenJuice[, 3], main = &quot;Monthly Freezing Degree Days in Orlando, FL&quot;, ylab = &quot;Freezing degree days&quot;, col = &quot;steelblue&quot;, lwd = 2, date.format = &quot;%Y&quot;, minor.ticks = F ) It is conspicious that periods with a high amount of freezing degree days are followed by large month-to-month price changes. These coindciding movements give rise to run a simple regression of price changes \\(\\%ChgOJC_t\\) on freezing degree days (\\(FDD_t\\)) to estimate the effect of an additional freezing degree day one the price in the current month. For this, as for all other regressions in this chapter, we use \\(T=611\\) observations (January 1950 to December 200). # simple regression of percent changes on freezing degree days orange_SR &lt;- dynlm(FOJC_pctc ~ FDD) coeftest(orange_SR, vcov. = vcovHAC) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.42095 0.18683 -2.2531 0.0246064 * ## FDD 0.46724 0.13385 3.4906 0.0005167 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Notice that the standard errors are computed using a HAC estimator of the model variance-covariance matrix, a matter that will not be further commented at this point, see Chapter 14.5. \\[\\begin{align*} \\widehat{\\%ChgOJC_t} = \\underset{(0.19)}{-0.42} + \\underset{(0.13)}{0.47} FDD_t \\end{align*}\\] The estimated coefficient on \\(FDD_t\\) has the following interpretation: an additional freezing degree day in month \\(t\\) leads to a price increase 0f \\(0.47\\%\\) in the same month. To consider effects of cold snaps on the orange juice price over following, we include lagged values of \\(FDD_t\\) in our model which leads to a so-called distributed lag regression. We estimate a specification of a contemporeneous and six lagged values of \\(FDD_t\\). # distributed lag model with 6 lags of freezing degree days orange_DLM &lt;- dynlm(FOJC_pctc ~ FDD + L(FDD, 1:6)) coeftest(orange_DLM, vcov. = vcovHAC) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.692961 0.212445 -3.2618 0.0011700 ** ## FDD 0.471433 0.135195 3.4871 0.0005242 *** ## L(FDD, 1:6)1 0.145021 0.081557 1.7782 0.0758853 . ## L(FDD, 1:6)2 0.058364 0.058911 0.9907 0.3222318 ## L(FDD, 1:6)3 0.074166 0.047143 1.5732 0.1162007 ## L(FDD, 1:6)4 0.036304 0.029335 1.2376 0.2163670 ## L(FDD, 1:6)5 0.048756 0.031370 1.5543 0.1206535 ## L(FDD, 1:6)6 0.050246 0.045129 1.1134 0.2659919 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 As a result we obtain \\[\\begin{align*} \\widehat{\\%ChgOJC_t} =&amp; \\, \\underset{(0.21)}{-0.69} + \\underset{(0.14)}{0.47} FDD_t + \\underset{(0.08)}{0.15} FDD_{t-1} + \\underset{(0.06)}{0.06} FDD_{t-2} + \\underset{(0.05)}{0.07} FDD_{t-3} \\\\ &amp;\\,+ \\underset{(0.03)}{0.04} FDD_{t-4} + \\underset{(0.03)}{0.05} FDD_{t-5} + \\underset{(0.05)}{0.05} FDD_{t-6} \\tag{15.1} \\end{align*}\\] where the coefficient on \\(FDD_{t-1}\\) estimates the price increase in period \\(t\\) caused by an additional freezing degree day in the preceding month, the coefficient on \\(FDD_{t-2}\\) estimates the effect of an additional freezing degree day two month ago and so on. Consequently, the coefficients in (15.1) can be interpreted as price changes in current and future periods due to a unit increase in the current month’ freezing degree days. "],
["dynamic-causal-effects.html", "15.2 Dynamic Causal Effects", " 15.2 Dynamic Causal Effects This section of the book describes the general idea of a dynamic causal effect and how the concept of a randomized controlled experiment which (as has been discussed in Chapter 13) constitutes and ideal study design can be translated to time series applications, using several examples. For brevity we will not go into the details but note once again that the distributed lag model mentionted above can often be used to estimate a dynamic causal relationship. In general, for empirical attempts to measure a dynamic causal effect, the assumptions of stationarity (see Key Concept 14.5) and exogeneity must hold. In the time series appliaction up until here we have assumed that the model error term has conditional mean zero given current and past values of the regressors. For estimation of a dynamic causal effect using a distributed lag model, assuming a stronger form termed strict exogeneity may be useful. Strict exogeneity states that the error term has mean zero conditional on past, present and future values of the independent variables. The two concepts of exogeneity and the distributive lag model are summarized in Key Concept 15.1 Key Concept 15.1 The Distributed Lag Model and Exogeneity The general distributed lag model is \\[\\begin{align*} Y_t = \\beta_0 + \\beta_1 X_t + \\beta_2 X_{t-1} + \\beta_3 X_{t-2} + \\dots + \\beta_{r+1} X_{t-r} + u_t \\tag{15.2} \\end{align*}\\] where it is assumed that \\(X\\) is an exogenous variable, \\[E(u_t\\vert X_t, X_{t-1}, X_{t-2},\\dots) = 0.\\] \\(X_t,Y_t\\) have a stationary distribution. \\((Y_t,X_t)\\) and \\((Y_{t-j},X_{t-j})\\) become independently distributed as \\(j\\) gets large. Large outliers are unlikely. In particular, we need that the all variables have more than eight nonzero and finite moments — a stronger assumption than before (four finite nonzero moments) that is required for computation of the HAC covariance matrix estimator. There is no perfect multicollinearity. The distributed lag model may be extended to include contempoarneous and past values of additional regressors. On the assumption of exogeneity There is another form of exogeneity termed strict exogeneity which assumes \\[E(u_t\\vert \\dots X_{t+2},X_{t+1},X_t,X_{t-1},X_{t-2},\\dots)=0,\\] that is the error term is has mean zero conditional on past, present and future values of \\(X\\). Strict exogeneity implies exogeneity (as defined in 1.) but not the other way around. From this point we will therefore distinguish between exogeneity and strict exogeneity. Exogeneity as in 1. suffices for OLS estimators of the coefficient in distributed lag models to be consistent. However, if the the assumption of strict exogeneity can be made, more efficient estimators can be applied. "],
["dynamic-multipliers-and-cumulative-dynamic-multipliers.html", "15.3 Dynamic Multipliers and Cumulative Dynamic Multipliers", " 15.3 Dynamic Multipliers and Cumulative Dynamic Multipliers The following terminoligy regarding the coefficients in the distributed lag model (15.2) are useful for upcoming applications: The dynamic causal effect is also termed the dynamic multiplier. We say that \\(\\beta_{h+1}\\) in (15.2) is the \\(h\\)-period dynamic multiplier. The contemporaneous effect of \\(X\\) ond \\(Y\\), \\(\\beta_1\\), is termed the impact effect. The \\(h\\)-period cumulative dynamic multiplier of a unit change in \\(X\\) and \\(Y\\) is defined as the cumulative sum of the dynamic multipliers. In particualr, \\(\\beta_1\\) is the zero-period cumulative dynamic multiplier, \\(\\beta_1 + \\beta_2\\) is the one-period cumulative dynamic multiplier and so forth. Cumulative dynamic multipliers of (15.2) are the coefficients \\(\\delta_1,\\delta_2,\\dots,\\delta_r,\\delta_{r+1}\\) in the modified regression \\[\\begin{align*} Y_t =&amp; \\, \\delta_0 + \\delta_1 \\Delta X_t + \\delta_2 \\Delta X_{t-1} + \\dots + \\delta_r \\Delta X_{t-r+1} + \\delta_{r+1} X_{t-r} + u_t. \\tag{15.3} \\end{align*}\\] and thus can be directly estimated using OLS wich makes it convenient to compute their HAC standard errors. \\(\\delta_{r+1}\\) is called the long-run dynamic multiplier. It is straightforward to compute the cumulative dynamic multipliers for (15.1), the estimated distributed lag regression of changes in orange juice concentrate prices on freezing degree days, using the corresponding model object orange_DLM and the function cumsum(). # compute cumulative multipliers cum_mult &lt;-cumsum(orange_DLM$coefficients[-1]) # rename entries names(cum_mult) &lt;- paste(0:6, sep = &quot;-&quot;, &quot;period CDM&quot;) cum_mult ## 0-period CDM 1-period CDM 2-period CDM 3-period CDM 4-period CDM ## 0.4714329 0.6164542 0.6748177 0.7489835 0.7852874 ## 5-period CDM 6-period CDM ## 0.8340436 0.8842895 Translating the distributed lag model with six lags of \\(FDD\\) to (15.3), we see that the OLS coefficient estimates in this model coincide with the multipliers stored in cum_mult. # estimate cumulative dynamic multipliers using the modified regression cum_mult_reg &lt;-dynlm(FOJC_pctc ~ d(FDD) + d(L(FDD,1:5)) + L(FDD,6)) coef(cum_mult_reg)[-1] ## d(FDD) d(L(FDD, 1:5))1 d(L(FDD, 1:5))2 d(L(FDD, 1:5))3 ## 0.4714329 0.6164542 0.6748177 0.7489835 ## d(L(FDD, 1:5))4 d(L(FDD, 1:5))5 L(FDD, 6) ## 0.7852874 0.8340436 0.8842895 As noted above, this spcification of model allows to obtain standard errors for the estimated dynamic cumulative multipliers. coeftest(cum_mult_reg, vcov. = vcovHAC) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.69296 0.23668 -2.9278 0.0035431 ** ## d(FDD) 0.47143 0.13583 3.4709 0.0005562 *** ## d(L(FDD, 1:5))1 0.61645 0.13145 4.6896 3.395e-06 *** ## d(L(FDD, 1:5))2 0.67482 0.16009 4.2151 2.882e-05 *** ## d(L(FDD, 1:5))3 0.74898 0.17263 4.3387 1.682e-05 *** ## d(L(FDD, 1:5))4 0.78529 0.17351 4.5260 7.255e-06 *** ## d(L(FDD, 1:5))5 0.83404 0.18236 4.5737 5.827e-06 *** ## L(FDD, 6) 0.88429 0.19303 4.5810 5.634e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 "],
["hac-standard-errors.html", "15.4 HAC Standard Errors", " 15.4 HAC Standard Errors The error term \\(u_t\\) in the distributed lag model (15.2) may be serially correlated due to serially correlated determinants of \\(Y_t\\) that are not included as regressors. When these factors are not correlated with the regressors included in the model, serially correlated errors do not violate the assumption of exogeneity such that the OLS estimator remains unbiased and consistent. Instead, autocorrelated standard errors render the usual homoskedasticity-only and heteroskedasticity-robust standard errrors invalid and may lead to misleading statistical inference. HAC errors are a remedy for this issue. Key Concept 15.2 Key Concept 15.2 HAC Standard errors Problem: If the error term \\(u_t\\) in the distributed lag model (15.2) is serially correlated, satistical inference that rests on usual (heteroskedasticity-robust) standard errors can be strongly misleading. Solution: Heteroskedasticity- and autocorrelation-consistent (HAC) estimators of the variance-covariance matrix circumvent this issue. There are R functions like vcovHAC() from the package sandwich which are convinient for computation of such estimators. The package sandwich also contains the function NeweyWest(), an implementation of the HAC variace-covariance estimator proposed by Newey and West (1987). Consider the distributed lag regression model with no lags and the single regressor \\(X_t\\) \\[\\begin{align*} Y_t = \\beta_0 + \\beta_1 X_t + u_t. \\end{align*}\\] with autocorrelated errors. A brief derivation of \\[\\begin{align*} \\overset{\\sim}{\\sigma}^2_{\\widehat{\\beta}_1} = \\widehat{\\sigma}^2_{\\widehat{\\beta}_1} \\widehat{f}_t, \\tag{15.4} \\end{align*}\\] the so-called Newey-West variance estimator for the variance of the OLS estimator of \\(\\beta_1\\) is presented in Chapter 15.4 of the book. \\(\\widehat{\\sigma}^2_{\\widehat{\\beta}_1}\\) in (15.4) is the heteroskedasticity-robust variance estimate of \\(\\widehat{\\beta}_1\\) and \\[\\begin{align*} \\widehat{f}_t = 1 + 2 \\sum_{j=1}^{m-1} \\left(\\frac{m-j}{m}\\right) \\overset{\\sim}{\\rho}_j \\tag{15.5} \\end{align*}\\] is a correction factor that adjusts for serially correlated errors and involves estimates of \\(m-1\\) autocovariances \\(\\overset{\\sim}{\\rho}_j\\), whereby \\(m\\) is a truncation parameter to be chosen. A rule-of-thumb for choosing \\(m\\) is \\[\\begin{align*} m = \\left \\lfloor{0.75 \\cdot T^{1/3}}\\right\\rfloor. \\end{align*}\\] In the following we simulate a time series that, as stated above, follows a distributed lag model with autocorrelated errors and then show how to compute the Newey West HAC estimate of \\(SD(\\widehat{\\beta}_1)\\) using R. This is done in two seperat but, as we will see, identical approches: at first we follow the derivation presented in the book step-by-step and compute the estimate by hand . Then we prove that the result is exactly the estimate obtained when using the function NeweyWest(). # function that computes rho tilde acf_c &lt;- function(x,j) { return( t(x[-c(1:j)]) %*% na.omit(Lag(x, j)) / t(x) %*% x ) } # simulate time series with serially correlated errors set.seed(1) eps &lt;- arima.sim(n = 100, model = list(ma = 0.5)) X &lt;- runif(100, 1, 10) Y &lt;- 0.5 * X + eps # compute OLS residuals res &lt;- lm(Y ~ X)$res # compute v v &lt;- (X - mean(X)) * res # compute robust estimate of beta_1 variance var_beta_hat &lt;- 1/100 * (1/(100-2) * sum((X - mean(X))^2 * res^2) ) / (1/100 * sum((X-mean(X))^2))^2 # rule of thumb truncation parameter m &lt;- floor(0.75 * 100^(1/3)) # compute correction factor f_hat_T &lt;- 1 + 2 * sum( (m - 1:(m-1))/m * sapply(1:(m-1), function(i) acf_c(x=v, j=i)) ) # compute Newey West HAC estimate of the standard error sqrt(var_beta_hat * f_hat_T) ## [1] 0.04036208 By choosing lag = m-1 it is ensured that the maximum order of autocorrelations used is \\(m-1\\) — just as in equation (15.5). Notice that we further set the arguments prewhite = F and adjust = T to ensure that the formula (15.4) is used and finite sample adjustments are made. # Using NeweyWest(): NW_VCOV &lt;- NeweyWest(lm(Y ~ X), lag = m - 1, prewhite = F, adjust = T ) # compute standard error sqrt(diag(NW_VCOV))[2] ## X ## 0.04036208 We find that the computed standard errors coincide. Of course, a variance-covariance matrix estimate as computed by NeweyWest() can be supplied as the argument vcov in coeftest() such that HAC \\(t\\)-statistics and \\(p\\)-values are provided. example_mod &lt;- lm(Y ~ X) coeftest(example_mod, vcov = NW_VCOV) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.542310 0.235423 2.3036 0.02336 * ## X 0.423305 0.040362 10.4877 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 "],
["estimation-of-dynamic-causal-effects-with-strictly-exogeneous-regressors.html", "15.5 Estimation of Dynamic Causal Effects with Strictly Exogeneous Regressors", " 15.5 Estimation of Dynamic Causal Effects with Strictly Exogeneous Regressors In general, the errors in a distributed lag model are correlated which necessitates usage of HAC standard errors for valid inference. If, however, the assumption of exogeneity (the frist assumption stated in Key Concept 15.1) is replaced by strict exogeneity, that is \\[E(u_t\\vert \\dots, X_{t+1}, X_{t}, X_{t-1}, \\dots),\\] more efficient approaches than OLS estimation of the coefficients may be available. For a general distributed lag model with \\(r\\) lags and AR(\\(p\\)) errors, these approaches are summarized in Key Concept 15.4. Key Concept 15.4 Estimation of Dynamic Multipliers Under Strict Exogeneity Consider the general distributed lag model with \\(r\\) lags and assume that the errors follow an \\(AR(p)\\) process, \\[\\begin{align*} Y_t =&amp; \\, \\beta_0 + \\beta_1 X_t + \\beta_2 X_{t-1} + \\dots + \\beta_{r+1} X_{t-r} + u_t \\\\ u_t =&amp; \\, \\phi_1 u_{t-1} + \\phi u_{t-2} + \\dots + \\phi_p u_{t-p} + \\overset{\\sim}{u}_t. \\tag{15.6} \\end{align*}\\] Assuming strict exogeneity of \\(X_t\\), one may rewrite the above model in the ADL specification \\[\\begin{align*} Y_t =&amp; \\, \\alpha_0 + \\phi_1 Y_{t-1} + \\phi_2 Y_{t-2} + \\dots + \\phi_p Y_{t-p} \\\\ &amp;+ \\, \\delta_0 X_t + \\delta_1 X_{t-1} + \\dots + \\delta_q X_{t-q} + \\overset{\\sim}{u}_t \\end{align*}\\] where \\(q=r+p\\) and compute estimates of the dynamic multipliers \\(\\beta_1, \\beta_2, \\dots, \\beta_{r+1}\\) using OLS estimates of \\(\\phi_1, \\phi_2, \\dots, \\phi_p, \\delta_0, \\delta_1, \\dots, \\delta_q\\). An alternative is to estimate the dynamic multipliers using feasible GLS, that is to apply the OLS estimator to a quasi-differenced specification of (15.6). Under strict exogeneity, the feasible GLS approach is the BLUE estimator for the dynamic multipliers in large samples. In what follows we shortly review how different representations of a distribted lag model can be obtained when the causal effect in \\(Y\\) of a change in \\(X\\) lasts for only two periods and show how these specification can be estimated by OLS and GLS using R. The model is \\[\\begin{align*} Y_t = \\beta_0 + \\beta_1 X_t + \\beta_2 X_{t-1} + u_t \\tag{15.7} \\end{align*}\\] so a change in \\(X\\) has a contemporaneous effect on \\(Y\\) (\\(\\beta_1\\)) and an effect in the next period (\\(\\beta_2\\)). The error term \\(u_t\\) follows an AR(\\(1\\)) process,\\[u_t = \\phi_1 u_{t-1} + \\overset{\\sim}{u_t}\\] where \\(\\overset{\\sim}{u_t}\\) is serially uncorrelated. One can show that the ADL representation of this model is \\[\\begin{align*} Y_t = \\alpha_0 + \\phi_1 Y_{t-1} + \\delta_0 X_t + \\delta_1 X_{t-1} + \\delta_2 X_{t-2} + \\overset{\\sim}{u}_t \\tag{15.8} \\end{align*}\\] with the restrictions \\[\\begin{align*} \\beta_1 =&amp; \\, \\delta_0, \\\\ \\beta_2 =&amp; \\, \\delta_1 + \\phi_1 \\delta_0. \\end{align*}\\] Another way of writing this ADL(\\(1\\),\\(2\\)) representation is the quasi-difference model \\[\\begin{align*} \\overset{\\sim}{Y}_t = \\alpha_0 + \\beta_1 \\overset{\\sim}{X}_t + \\beta_2 \\overset{\\sim}{X}_{t-1} + \\overset{\\sim}{u}_t \\tag{15.9} \\end{align*}\\] where \\(\\overset{\\sim}{Y}_t = Y_t - \\phi_1 Y_{t-1}\\) and \\(\\overset{\\sim}{X}_t = X_t - \\phi_1 X_{t-1}\\). Notice that the error term \\(\\overset{\\sim}{u}_t\\) is uncorrelated in both models and, as shown in Chapter 15.5 of the book, \\[E(u_t\\vert X_{t+1}, X_t, X_{t-1}, \\dots) = 0\\] which is implied by the assumption of strict exogeneity. We continue by simulation a time series of \\(500\\) observations using the model (15.7) where \\(\\beta_1 = 0.1\\), \\(\\beta_2 = 0.25\\), \\(\\phi = 0.5\\) and \\(\\overset{\\sim}{u}_t \\sim N(0,1)\\) and start by estimating the distributed lag model. # simulate time series with serially correlated errors set.seed(1) obs &lt;- 501 eps &lt;- arima.sim(n = obs-1 , model = list(ar = 0.5)) X &lt;- arima.sim(n = obs, model = list(ar = 0.25)) Y &lt;- 0.1 * X[-1] + 0.25 * X[-obs] + eps X &lt;- ts(X[-1]) # estimate the distributed lag model dlm &lt;- dynlm(Y ~ X + L(X)) It is straightforward to check whether the residuals of this model exhibit autocorrelation by using acf(). # check that the residuals are serially correlated acf( residuals(dlm) ) The plot indicates that the residuals are autocorrelated. In particular, the pattern reveals that the residuals follow an autoregressive process, as the sample autocorrelation function decays quickly for the first few lags and is probably zero for higher lag orders. At any case, HAC standard errors should. # coefficient summary using NeweyWest estimator coeftest(dlm, vcov = NeweyWest(dlm, prewhite = F, adjust = T)) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.038340 0.073411 0.5223 0.601717 ## X 0.123661 0.046710 2.6474 0.008368 ** ## L(X) 0.247406 0.046377 5.3347 1.458e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 OLS Estimation of the ADL Model Next, we estimate the ADL(\\(2\\),\\(1\\)) model (15.8) using OLS. Notice that the errors are uncorrelated in this representation of the model. This statement is supported by a plot of the sample autocorrelation function of the residual series. # Estimate ADL(2, 1) representation adl21_dynamic &lt;- dynlm(Y ~ L(Y) + X + L(X, 1:2)) # plot sample autocorrelaltions of residuals acf(adl21_dynamic$residuals) The estimated coefficients in adl21_dynamic$coefficients are not the dynamic multiplers we are interested in but can be computed according to the restrictions in (15.8) where the true coefficients are replaced by their OLS estimates. t &lt;- adl21_dynamic$coefficients # compute estimated dynamic effects using coefficient restrictions # in the ADL(2,1) representation c( &quot;hat_beta_1&quot; = t[3], &quot;hat_beta_2&quot; = t[4] + t[3] * t[2] ) ## hat_beta_1.X hat_beta_2.L(X, 1:2)1 ## 0.1176425 0.2478484 GLS Estimation Strict exogeneity allows OLS estimation of the quasi-difference model (15.9). The idea of applying the OLS estimator to a model where the variables are linearly transformed such that the model errors are uncorrelated and homoskedastic is called generalized least squares (GLS) The OLS estimator in (15.9) is called the infeasible GLS estimator because we \\(\\overset{\\sim}{Y}\\) and \\(\\overset{\\sim}{X}\\) cannot be computed without \\(\\phi_1\\), the autoregressive coefficient in the error AR(\\(1\\)) model, which is generally unknown in practice. Suppose \\(\\phi = 0.5\\) was known. The infeasible GLS estimates of the dynamic multipliers in (15.7) are obtained by applying OLS to the transformed data. # GLS: estimate quasi-differenced specification by OLS iGLS_dynamic &lt;- dynlm(I(Y- 0.5 * L(Y)) ~ I(X - 0.5* L(X)) + I(L(X) - 0.5* L(X,2)) ) summary(iGLS_dynamic) ## ## Time series regression with &quot;ts&quot; data: ## Start = 3, End = 500 ## ## Call: ## dynlm(formula = I(Y - 0.5 * L(Y)) ~ I(X - 0.5 * L(X)) + I(L(X) - ## 0.5 * L(X, 2))) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.0325 -0.6375 -0.0499 0.6658 3.7724 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.01620 0.04564 0.355 0.72273 ## I(X - 0.5 * L(X)) 0.12000 0.04237 2.832 0.00481 ** ## I(L(X) - 0.5 * L(X, 2)) 0.25266 0.04237 5.963 4.72e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.017 on 495 degrees of freedom ## Multiple R-squared: 0.07035, Adjusted R-squared: 0.0666 ## F-statistic: 18.73 on 2 and 495 DF, p-value: 1.442e-08 The feasible GLS estimator uses preliminary estimation of the coefficients in the presumed error term model, computes the quasi-differenced data and then estimates the model using OLS. This idea was introduced by Cochrance and Orcutt (1949) and can be extended by continuing this process iteratively. Such a procedure is implemented in the function cochrane.orcutt() from the package orcutt. X_t &lt;- c(X[-1]) X_l1 &lt;- c(X[-500]) Y_t &lt;- c(Y[-1]) # iterated cochrance-orcutt procedure cochrane.orcutt(lm(Y_t ~ X_t + X_l1)) ## Cochrane-orcutt estimation for first order autocorrelation ## ## Call: ## lm(formula = Y_t ~ X_t + X_l1) ## ## number of interaction: 3 ## rho 0.464483 ## ## Durbin-Watson statistic ## (original): 1.06907 , p-value: 1.05e-25 ## (transformed): 1.98192 , p-value: 4.246e-01 ## ## coefficients: ## (Intercept) X_t X_l1 ## 0.032885 0.120128 0.252406 Some more sophisticated methods are provided with the package nlme. # feasible GLS maximum likelihood estimation preocedure gls(Y_t ~ X_t + X_l1, correlation = corAR1()) ## Generalized least squares fit by REML ## Model: Y_t ~ X_t + X_l1 ## Data: NULL ## Log-restricted-likelihood: -720.9235 ## ## Coefficients: ## (Intercept) X_t X_l1 ## 0.03929124 0.11986994 0.25287471 ## ## Correlation Structure: AR(1) ## Formula: ~1 ## Parameter estimate(s): ## Phi ## 0.4668343 ## Degrees of freedom: 499 total; 496 residual ## Residual standard error: 1.14952 "]
]
